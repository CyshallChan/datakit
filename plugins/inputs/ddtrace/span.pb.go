// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: plugins/inputs/ddtrace/span.proto

package ddtrace

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/gogo/protobuf/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DDSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service  string             `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Name     string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Resource string             `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	TraceID  uint64             `protobuf:"varint,4,opt,name=traceID,proto3" json:"traceID,omitempty"`
	SpanID   uint64             `protobuf:"varint,5,opt,name=spanID,proto3" json:"spanID,omitempty"`
	ParentID uint64             `protobuf:"varint,6,opt,name=parentID,proto3" json:"parentID,omitempty"`
	Start    int64              `protobuf:"varint,7,opt,name=start,proto3" json:"start,omitempty"`
	Duration int64              `protobuf:"varint,8,opt,name=duration,proto3" json:"duration,omitempty"`
	Error    int32              `protobuf:"varint,9,opt,name=error,proto3" json:"error,omitempty"`
	Meta     map[string]string  `protobuf:"bytes,10,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Metrics  map[string]float64 `protobuf:"bytes,11,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Type     string             `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DDSpan) Reset() {
	*x = DDSpan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugins_inputs_ddtrace_span_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDSpan) ProtoMessage() {}

func (x *DDSpan) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_inputs_ddtrace_span_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDSpan.ProtoReflect.Descriptor instead.
func (*DDSpan) Descriptor() ([]byte, []int) {
	return file_plugins_inputs_ddtrace_span_proto_rawDescGZIP(), []int{0}
}

func (x *DDSpan) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *DDSpan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DDSpan) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *DDSpan) GetTraceID() uint64 {
	if x != nil {
		return x.TraceID
	}
	return 0
}

func (x *DDSpan) GetSpanID() uint64 {
	if x != nil {
		return x.SpanID
	}
	return 0
}

func (x *DDSpan) GetParentID() uint64 {
	if x != nil {
		return x.ParentID
	}
	return 0
}

func (x *DDSpan) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *DDSpan) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *DDSpan) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *DDSpan) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DDSpan) GetMetrics() map[string]float64 {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *DDSpan) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

var File_plugins_inputs_ddtrace_span_proto protoreflect.FileDescriptor

var file_plugins_inputs_ddtrace_span_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x2f, 0x64, 0x64, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x07, 0x64, 0x64, 0x74, 0x72, 0x61, 0x63, 0x65, 0x1a, 0x2d, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x06, 0x0a, 0x06,
	0x44, 0x44, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xea, 0xde, 0x1f, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0xf2, 0xde, 0x1f, 0x0d, 0x6d, 0x73, 0x67, 0x3a, 0x22, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x22, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2a,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xde,
	0x1f, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xf2, 0xde, 0x1f, 0x0a, 0x6d, 0x73, 0x67, 0x3a, 0x22, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xea, 0xde,
	0x1f, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0xf2, 0xde, 0x1f, 0x0e, 0x6d, 0x73,
	0x67, 0x3a, 0x22, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1e, 0xea, 0xde, 0x1f, 0x08, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0xf2, 0xde, 0x1f, 0x0e, 0x6d, 0x73, 0x67, 0x3a, 0x22, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44,
	0x12, 0x34, 0x0a, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x1c, 0xea, 0xde, 0x1f, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0xf2, 0xde, 0x1f,
	0x0d, 0x6d, 0x73, 0x67, 0x3a, 0x22, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x06,
	0x73, 0x70, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x20, 0xea, 0xde, 0x1f, 0x09, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0xf2, 0xde, 0x1f, 0x0f, 0x6d, 0x73, 0x67, 0x3a, 0x22,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x18, 0xea, 0xde, 0x1f, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0xf2, 0xde,
	0x1f, 0x0b, 0x6d, 0x73, 0x67, 0x3a, 0x22, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1e, 0xea, 0xde, 0x1f, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xde, 0x1f, 0x0e, 0x6d, 0x73, 0x67, 0x3a, 0x22, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x18, 0xea, 0xde, 0x1f, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0xf2, 0xde, 0x1f, 0x0b, 0x6d, 0x73,
	0x67, 0x3a, 0x22, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x45, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x64, 0x64, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x44, 0x53, 0x70, 0x61, 0x6e, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x16, 0xea, 0xde, 0x1f, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0xf2, 0xde, 0x1f, 0x0a, 0x6d, 0x73, 0x67, 0x3a, 0x22, 0x6d, 0x65, 0x74, 0x61,
	0x22, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x64, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x2e, 0x44, 0x44, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1c, 0xea, 0xde, 0x1f, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0xf2, 0xde, 0x1f, 0x0d, 0x6d, 0x73, 0x67, 0x3a, 0x22, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x22, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2a, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xde, 0x1f,
	0x04, 0x74, 0x79, 0x70, 0x65, 0xf2, 0xde, 0x1f, 0x0a, 0x6d, 0x73, 0x67, 0x3a, 0x22, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x65, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x45,
	0x5a, 0x43, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x6a, 0x69, 0x61, 0x67, 0x6f, 0x75, 0x79,
	0x75, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x63, 0x61, 0x72, 0x65,
	0x2d, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x6b, 0x69, 0x74, 0x2f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2f, 0x64, 0x64,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plugins_inputs_ddtrace_span_proto_rawDescOnce sync.Once
	file_plugins_inputs_ddtrace_span_proto_rawDescData = file_plugins_inputs_ddtrace_span_proto_rawDesc
)

func file_plugins_inputs_ddtrace_span_proto_rawDescGZIP() []byte {
	file_plugins_inputs_ddtrace_span_proto_rawDescOnce.Do(func() {
		file_plugins_inputs_ddtrace_span_proto_rawDescData = protoimpl.X.CompressGZIP(file_plugins_inputs_ddtrace_span_proto_rawDescData)
	})
	return file_plugins_inputs_ddtrace_span_proto_rawDescData
}

var (
	file_plugins_inputs_ddtrace_span_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
	file_plugins_inputs_ddtrace_span_proto_goTypes  = []interface{}{
		(*DDSpan)(nil), // 0: ddtrace.DDSpan
		nil,            // 1: ddtrace.DDSpan.MetaEntry
		nil,            // 2: ddtrace.DDSpan.MetricsEntry
	}
)

var file_plugins_inputs_ddtrace_span_proto_depIdxs = []int32{
	1, // 0: ddtrace.DDSpan.meta:type_name -> ddtrace.DDSpan.MetaEntry
	2, // 1: ddtrace.DDSpan.metrics:type_name -> ddtrace.DDSpan.MetricsEntry
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_plugins_inputs_ddtrace_span_proto_init() }
func file_plugins_inputs_ddtrace_span_proto_init() {
	if File_plugins_inputs_ddtrace_span_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_plugins_inputs_ddtrace_span_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDSpan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plugins_inputs_ddtrace_span_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_plugins_inputs_ddtrace_span_proto_goTypes,
		DependencyIndexes: file_plugins_inputs_ddtrace_span_proto_depIdxs,
		MessageInfos:      file_plugins_inputs_ddtrace_span_proto_msgTypes,
	}.Build()
	File_plugins_inputs_ddtrace_span_proto = out.File
	file_plugins_inputs_ddtrace_span_proto_rawDesc = nil
	file_plugins_inputs_ddtrace_span_proto_goTypes = nil
	file_plugins_inputs_ddtrace_span_proto_depIdxs = nil
}
