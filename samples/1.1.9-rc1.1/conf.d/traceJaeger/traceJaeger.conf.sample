# {"version": "1.1.9-rc1.1", "desc": "do NOT edit this line"}

[[inputs.traceJaeger]]
  #	path = "/api/traces"
  #	udp_agent = "127.0.0.1:6832"

  ## Tracing data sample config, [rate] and [scope] together determine how many trace sample data
  ## will be send to DataFlux workspace.
  ## Sub item in sample_configs list with first priority.
  # [[inputs.traceJaeger.sample_configs]]
    ## Sample rate, how many tracing data will be sampled
    # rate = 10
    ## Sample scope, the range to be covered in once sample action.
    # scope = 100
    ## Ignore tags list, keys appear in this list is transparent to sample function which means every trace carrying this tag will bypass sample function.
    # ignore_tags_list = []
    ## Sample target, program will search this [key, value] tag pairs to match a assgined sample config set in root span.
    # [inputs.traceJaeger.sample_configs.target]
    # env = "prod"

  ## Sub item in sample_configs list with second priority.
  # [[inputs.traceJaeger.sample_configs]]
    ## Sample rate, how many tracing data will be sampled.
    # rate = 100
    ## Sample scope, the range to be covered in once sample action.
    # scope = 1000
    ## Ignore tags list, keys appear in this list is transparent to sample function which means every trace carrying this tag will bypass sample function.
    # ignore_tags_list = []
    ## Sample target, program will search this [key, value] tag pairs to match a assgined sample config set in root span.
    # [inputs.traceJaeger.sample_configs.target]
    # env = "dev"

    ## ...

  ## Sub item in sample_configs list with last priority.
  # [[inputs.traceJaeger.sample_configs]]
    ## Sample rate, how many tracing data will be sampled.
    # rate = 10
    ## Sample scope, the range to be covered in once sample action.
    # scope = 100
    ## Ignore tags list, keys appear in this list is transparent to sample function which means every trace carrying this tag will bypass sample function.
    # ignore_tags_list = []
    ## Sample target, program will search this [key, value] tag pairs to match a assgined sample config set in root span.
    ## As general, the last item in sample_configs list without [tag, value] pair will be used as default sample rule
    ## only if all above rules mismatched.
    # [inputs.traceJaeger.sample_configs.target]

  # [inputs.traceJaeger.tags]
    # tag1 = "val1"
    #	tag2 = "val2"
    # ...
